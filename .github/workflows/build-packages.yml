name: Build and Publish APKs

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  detect-packages:
    name: Detect modified packages
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.set-packages.outputs.packages }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Pour pouvoir comparer avec origin/main

      - id: set-packages
        run: |
          # Détecte les APKBUILD modifiés sous main/
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            # Pour les PR, compare avec la branche de base
            pkgs=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '^main/.*/APKBUILD' | cut -d/ -f2 | sort -u | tr '\n' ' ')
          else
            # Pour les push sur main, regarde le dernier commit
            pkgs=$(git diff --name-only HEAD~1 HEAD | grep '^main/.*/APKBUILD' | cut -d/ -f2 | sort -u | tr '\n' ' ')
          fi
          echo "Detected packages: $pkgs"
          echo "packages=$pkgs" >> "$GITHUB_OUTPUT"

  build:
    name: Build APKs multi-arch
    needs: detect-packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]
        # Les paquets seront passés via un input custom (bash) dans le job build
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU (for aarch64)
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build in Alpine Docker
        shell: bash
        env:
          PKGS: ${{ needs.detect-packages.outputs.packages }}
        run: |
          set -euo pipefail
          # Fallback si aucune détection: construire hello-test
          if [ -z "${PKGS// }" ]; then PKGS="hello-test"; fi
          echo "Packages to build: $PKGS"
          mkdir -p output/${{ matrix.arch }} keys

          # Sélectionne la plateforme Docker en fonction de l'arch
          if [ "${{ matrix.arch }}" = "aarch64" ]; then PLATFORM=linux/arm64; else PLATFORM=linux/amd64; fi

          # Create build script
          cat > build-packages.sh << SCRIPT_EOF
          #!/bin/sh
          set -ex
          cd ~
          mkdir -p ~/.abuild
          if [ -n "\${ABUILD_PRIVKEY:-}" ]; then
            printf "%s" "\${ABUILD_PRIVKEY}" > ~/.abuild/privkey.rsa
            chmod 600 ~/.abuild/privkey.rsa
            KEY=~/.abuild/privkey.rsa
          else
            # Generate new keypair
            abuild-keygen -n -a || true
            KEY=\$(ls ~/.abuild/builder-*.rsa)
          fi
          echo "PACKAGER=\"CI Builder\"" > ~/.abuild/abuild.conf
          echo "PACKAGER_PRIVKEY=\$KEY" >> ~/.abuild/abuild.conf

          # Install the public key for signing
          doas cp \$(ls ~/.abuild/*.pub) /etc/apk/keys/

          for pkg in $PKGS; do
            echo "=== Building \$pkg ==="
            cd /workspace/main/\$pkg || exit 1
            echo "Current directory: \$(pwd)"
            echo "Running abuild -r..."
            set +e  # Temporarily disable exit on error
            abuild -r
            RESULT=\$?
            set -e  # Re-enable exit on error
            
            # Check if APK was created despite potential index errors
            if find ~/packages -name "\$pkg-*.apk" | grep -q "."; then
              echo "Build completed for \$pkg (APK successfully created)"
            elif [ \$RESULT -eq 0 ]; then
              echo "Build successful for \$pkg"  
            else
              echo "Build failed for \$pkg (exit code: \$RESULT)"
              exit 1
            fi
            echo "Checking for generated packages:"
            find ~/packages -name "*.apk" -ls 2>/dev/null || echo "No APKs found for \$pkg yet"
          done
          SCRIPT_EOF

          docker run --rm --platform "$PLATFORM" \
            -e ABUILD_PRIVKEY="${{ secrets.ABUILD_PRIVKEY }}" \
            -e ARCH="${{ matrix.arch }}" \
            -e PKGS="$PKGS" \
            -v "$GITHUB_WORKSPACE":/workspace \
            -w /workspace \
            alpine:latest \
            sh -exc '
              set -e
              apk add --no-cache alpine-sdk doas sudo bash findutils coreutils

              adduser -D builder || true
              addgroup builder abuild || true
              adduser builder abuild || true

              # Fix workspace permissions pour que builder puisse écrire
              chown -R builder:builder /workspace

              mkdir -p /etc/doas.d
              printf "permit nopass :abuild\npermit nopass root as builder\npermit nopass builder\n" > /etc/doas.d/abuild.conf

              chmod +x /workspace/build-packages.sh
              su - builder -s /bin/sh -c "/workspace/build-packages.sh"

              # Export artifacts
              echo "=== Searching for APKs ==="
              find /home/builder/packages -type f -name "*.apk" -ls 2>/dev/null || echo "No APKs found"
              echo "=== Copying APKs ==="
              cp /home/builder/.abuild/*.pub /workspace/keys/alpine.pub || true
              find /home/builder/packages -type f \
                \( -path "*/${ARCH}/*" -o -path "*/noarch/*" \) \
                -name "*.apk" -exec cp {} /workspace/output/${ARCH}/ \; 2>/dev/null || true
              echo "=== Final check ==="
              ls -la /workspace/output/${ARCH}/ || true
            '

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ matrix.arch }}
          path: output/${{ matrix.arch }}

      - name: Upload public key (single arch)
        if: ${{ matrix.arch == 'x86_64' }}
        uses: actions/upload-artifact@v4
        with:
          name: keys
          path: keys/alpine.pub

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./public

      - name: Copy public key
        run: |
          mkdir -p public
          # La clé est publiée en tant qu'artefact "keys"
          if [ -f public/keys/alpine.pub ]; then
            cp public/keys/alpine.pub public/
          else
            echo "Warning: public key not found; continuing without it"
          fi

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
