name: Build and Publish APKs

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  detect-packages:
    name: Detect modified packages
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.set-packages.outputs.packages }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Pour pouvoir comparer avec origin/main

      - id: set-packages
        run: |
          # Détecte les APKBUILD modifiés sous main/
          pkgs=$(git diff --name-only origin/main...HEAD | grep '^main/.*/APKBUILD' | cut -d/ -f2 | sort -u | tr '\n' ' ')
          echo "Detected packages: $pkgs"
          echo "packages=$pkgs" >> "$GITHUB_OUTPUT"

  build:
    name: Build APKs multi-arch
    needs: detect-packages
    runs-on: ubuntu-latest
    if: ${{ needs.detect-packages.outputs.packages != '' }}
    strategy:
      matrix:
        arch: [x86_64, aarch64, armv7]
        # Les paquets seront passés via un input custom (bash) dans le job build
    steps:
      - uses: actions/checkout@v4

      - name: Setup Alpine ${{ matrix.arch }}
        uses: jirutka/setup-alpine@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Install dependencies
        shell: alpine.sh {0}
        run: |
          apk update
          apk add alpine-sdk git doas

      - name: Create builder user and permissions
        shell: alpine.sh {0}
        run: |
          adduser -D builder
          addgroup builder abuild || true
          adduser builder abuild || true
          # Configurer doas pour permettre au groupe abuild d'escalader et à root d'agir en tant que builder
          mkdir -p /etc/doas.d
          {
            echo 'permit nopass :abuild as root'
            echo 'permit nopass root as builder'
          } > /etc/doas.d/abuild.conf
          chown -R builder:abuild /github/workspace

      - name: Setup abuild keys
        shell: alpine.sh {0}
        run: |
          doas -u builder mkdir -p /home/builder/.abuild
          echo "${{ secrets.ABUILD_PRIVKEY }}" > /home/builder/.abuild/privkey.rsa
          chmod 600 /home/builder/.abuild/privkey.rsa
          # Configure abuild to use the provided key
          echo "PACKAGER=CI Builder <ci@example.com>" > /home/builder/.abuild/abuild.conf
          echo "PACKAGER_PRIVKEY=/home/builder/.abuild/privkey.rsa" >> /home/builder/.abuild/abuild.conf

      - name: Generate abuild public key
        shell: alpine.sh {0}
        run: |
          # Generate public key from the configured private key by re-keygen (creates .pub if missing)
          doas -u builder sh -lc 'abuild-keygen -n -a || true'
          mkdir -p keys
          cp /home/builder/.abuild/*.pub keys/alpine.pub || true

      - name: Build detected packages
        shell: alpine.sh {0}
        run: |
          pkgs="${{ needs.detect-packages.outputs.packages }}"
          echo "Packages to build: $pkgs"
          mkdir -p output/${{ matrix.arch }}

          for pkg in $pkgs; do
            echo "Building $pkg"
            cd main/$pkg
            # Build as non-root user
            doas -u builder sh -lc 'cd "$PWD" && abuild -r'
            # Copy only the APKs for the current package from builder's packages dir
            cp /home/builder/packages/${{ matrix.arch }}/"$pkg"-*.apk ../../output/${{ matrix.arch }}/
            cd ../../
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ matrix.arch }}
          path: output/${{ matrix.arch }}

      - name: Upload public key (single arch)
        if: ${{ matrix.arch == 'x86_64' }}
        uses: actions/upload-artifact@v4
        with:
          name: keys
          path: keys/alpine.pub

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./public

      - name: Copy public key
        run: |
          mkdir -p public
          # La clé est publiée en tant qu'artefact "keys"
          if [ -f public/keys/alpine.pub ]; then
            cp public/keys/alpine.pub public/
          else
            echo "Warning: public key not found; continuing without it"
          fi

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
