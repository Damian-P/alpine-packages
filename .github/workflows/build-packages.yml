name: Build and Publish APKs

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  detect-packages:
    name: Detect modified packages
    runs-on: self-hosted
    outputs:
      packages: ${{ steps.set-packages.outputs.packages }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Pour pouvoir comparer avec origin/main

      - id: set-packages
        run: |
          # Détecte les APKBUILD modifiés sous main/
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            # Pour les PR, compare avec la branche de base
            pkgs=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '^main/.*/APKBUILD' | cut -d/ -f2 | sort -u | tr '\n' ' ')
          else
            # Pour les push sur main, regarde le dernier commit
            pkgs=$(git diff --name-only HEAD~1 HEAD | grep '^main/.*/APKBUILD' | cut -d/ -f2 | sort -u | tr '\n' ' ')
          fi
          echo "Detected packages: $pkgs"
          echo "packages=$pkgs" >> "$GITHUB_OUTPUT"

  build:
    name: Build APKs multi-arch
    needs: detect-packages
    runs-on: self-hosted
    strategy:
      matrix:
        arch: [x86_64] # aarch64
        # Les paquets seront passés via un input custom (bash) dans le job build
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU (for aarch64)
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build in Alpine Docker
        shell: bash
        env:
          PKGS: ${{ needs.detect-packages.outputs.packages }}
        run: |
          set -euo pipefail
          # echo "=== Restore previously published packages (gh-pages cumulative) ==="
          # git fetch origin gh-pages:gh-pages || true
          # if git rev-parse --verify gh-pages >/dev/null 2>&1; then
          #   mkdir -p previous-packages output/main/${{ matrix.arch }}
          #   git --work-tree=previous-packages checkout gh-pages -- main/${{ matrix.arch }} alpine.pub || true
          #   if [ -d previous-packages/main/${{ matrix.arch }} ]; then
          #     cp -u previous-packages/main/${{ matrix.arch }}/*.apk output/main/${{ matrix.arch }}/ 2>/dev/null || true
          #   fi
          #   if [ -f previous-packages/alpine.pub ]; then
          #     mkdir -p keys
          #     cp previous-packages/alpine.pub keys/ 2>/dev/null || true
          #   fi
          # else
          #   echo "gh-pages branch not found (first run)"
          # fi
          # # Fallback si aucune détection: construire hello-test
          if [ -z "${PKGS// }" ]; then PKGS="incus-next incus-ui"; fi
          echo "Packages to build: $PKGS"
          mkdir -p output/main/${{ matrix.arch }} keys

          # Sélectionne la plateforme Docker en fonction de l'arch
          if [ "${{ matrix.arch }}" = "aarch64" ]; then PLATFORM=linux/arm64; else PLATFORM=linux/amd64; fi

          docker run --rm --platform "$PLATFORM" \
            -e ABUILD_PRIVKEY="${{ secrets.ABUILD_PRIVKEY }}" \
            -e ARCH="${{ matrix.arch }}" \
            -e PKGS="$PKGS" \
            -e OUTPUT_DIR="/workspace/output/main/${{ matrix.arch }}" \
            -e PRUNE_OLD=1 \
            -e PRUNE_KEEP=1 \
            -v "$GITHUB_WORKSPACE":/workspace \
            -w /workspace \
            alpine:latest \
            sh .ci/build-common-inside-container.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.arch }}
          path: output/main/${{ matrix.arch }}

      - name: Upload public key (single arch)
        if: ${{ matrix.arch == 'x86_64' }}
        uses: actions/upload-artifact@v4
        with:
          name: keys
          path: keys/

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: self-hosted
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      # - name: Install jq
      #   run: sudo apt-get update && sudo apt-get install -y jq

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./public

      - name: Prepare site content
        run: |
          mkdir -p public
          # Publier la clé publique (alpine.rsa.pub ou alpine.pub)
          if [ -f public/keys/alpine.rsa.pub ]; then
            cp public/keys/alpine.rsa.pub public/alpine.rsa.pub
            echo "Published alpine.rsa.pub as alpine.pub"
          else
            echo "Warning: no public key found in keys/ artifact"
          fi
          # Copier le fichier index.html (à la racine du site)
          cp index.html public/
          
          mkdir -p public/main
          for archdir in public/*; do
            b=$(basename "$archdir")
            case "$b" in x86_64|aarch64)
              mkdir -p public/main/$b
              # Copy all APK files
              cp -u "$archdir"/*.apk public/main/$b/ 2>/dev/null || true
              # Copy APKINDEX and signature files
              cp -u "$archdir"/APKINDEX.tar.gz public/main/$b/ 2>/dev/null || true
              cp -u "$archdir"/APKINDEX.tar.gz.sig public/main/$b/ 2>/dev/null || true
              echo "Copied files for $b:"
            ;; esac
          done

          # Générer une page index.html mise à jour avec les packages actuels
          echo "Generating updated index.html with current packages..."
          bash .ci/generate-index.sh public/

          echo "Resulting tree (depth 3):"
          find public -maxdepth 3 -type f -name '*.apk' | sed 's#public/##' | sort
          
          # Générer un manifest JSON des packages
          echo '{"packages": {}}' > public/manifest.json
          for arch in x86_64 aarch64; do
            if [ -d "public/main/${arch}" ]; then
              echo "Generating manifest for ${arch}..."
              packages_json="[]"
              for apk in public/main/${arch}/*.apk; do
                if [ -f "$apk" ]; then
                  filename=$(basename "$apk")
                  size=$(stat -f%z "$apk" 2>/dev/null || stat -c%s "$apk" 2>/dev/null || echo "0")
                  # Extraire les métadonnées du package APK (si possible)
                  version=$(echo "$filename" | sed -n 's/.*-\([0-9][^-]*-r[0-9]*\)\.apk$/\1/p')
                  name=$(echo "$filename" | sed 's/-[0-9].*//') 
                  
                  # Créer l'entrée JSON pour ce package
                  pkg_json="{\"name\":\"$name\",\"version\":\"$version\",\"filename\":\"$filename\",\"size\":$size,\"arch\":\"$arch\"}"
                  
                  if [ "$packages_json" = "[]" ]; then
                    packages_json="[$pkg_json]"
                  else
                    packages_json=$(echo "$packages_json" | sed "s/]$/,$pkg_json]/")
                  fi
                fi
              done
              
              # Mettre à jour le manifest avec les packages de cette architecture
              if [ "$packages_json" != "[]" ]; then
                jq_script=".packages.\"$arch\" = $packages_json"
                echo "$jq_script"
                temp_file=$(mktemp)
                if command -v jq >/dev/null 2>&1; then
                  jq "$jq_script" public/manifest.json > "$temp_file" && mv "$temp_file" public/manifest.json
                else
                  # Fallback sans jq - approche plus simple
                  sed -i.bak 's/{"packages": {}}/{"packages": {"'$arch'": '$packages_json'}}/g' public/manifest.json
                  rm -f public/manifest.json.bak
                fi
              fi
            fi
          done
          
          echo "Generated manifest:"
          cat public/manifest.json

          # Vérifier présence de l'index
          for arch in x86_64 aarch64; do
            if [ -f "public/main/${arch}/APKINDEX.tar.gz" ]; then echo "Index trouvé pour ${arch}"; fi
          done

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
