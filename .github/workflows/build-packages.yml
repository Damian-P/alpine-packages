name: Build Alpine APK Packages

on:
  push:
    branches: [ main ]
    paths:
      - 'main/**'
      - '.github/workflows/build-packages.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'main/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: alpine-repo

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build packages for ${{ matrix.arch }}
        run: |
          # Determine Docker platform
          case "${{ matrix.arch }}" in
            "x86_64") DOCKER_PLATFORM="linux/amd64" ;;
            "aarch64") DOCKER_PLATFORM="linux/arm64" ;;
          esac
          
          mkdir -p packages/main/${{ matrix.arch }}
          
          docker run --rm \
            --platform=$DOCKER_PLATFORM \
            --volume "$(pwd)/main:/home/packager/main" \
            --volume "$(pwd)/packages:/home/packager/packages" \
            alpine:edge sh -c "
              set -eux
              
              # Install dependencies
              apk add --no-cache sudo build-base alpine-sdk git
              
              # Setup packager user
              adduser -D packager
              addgroup packager abuild
              echo 'packager ALL=(ALL) NOPASSWD:ALL' >/etc/sudoers.d/packager
              
              sudo -u packager sh -c '
                # Generate signing keys
                abuild-keygen -n --append --install
                
                cd /home/packager/main
                
                # Build each package
                for pkg in */; do
                  pkg=\${pkg%/}
                  case \$pkg in
                    incus-next) continue ;;
                    *) ;;
                  esac
                  
                  echo \"Building package: \$pkg for Alpine edge (${{ matrix.arch }})\"
                  cd /home/packager/main/\$pkg
                  
                  abuild checksum || true
                  REPODEST=/home/packager/packages abuild -r
                  
                  cd /home/packager/main
                done
                
                # Generate repository index
                cd /home/packager/packages/main/${{ matrix.arch }}
                if ls *.apk >/dev/null 2>&1; then
                  apk index -o APKINDEX.tar.gz *.apk
                  abuild-sign -k /home/packager/.abuild/*.rsa.priv APKINDEX.tar.gz
                fi
              '
            "
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.arch }}
          path: packages/main/${{ matrix.arch }}/
          retention-days: 30

  # Job pour crÃ©er l'image Docker multi-architecture
  create-multiarch-image:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set lowercase repository name
        id: lowercase-repo
        run: echo "repo_lowercase=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      
      - name: Create repository structure
        env:
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          REPO_URL: ${{ env.REGISTRY }}/${{ steps.lowercase-repo.outputs.repo_lowercase }}/${{ env.IMAGE_NAME }}
        run: |
          # Create repository structure for both architectures
          mkdir -p repo/vedge/main/{x86_64,aarch64}
          
          # Copy x86_64 packages
          if [ -d "artifacts/packages-x86_64" ]; then
            cp artifacts/packages-x86_64/* repo/vedge/main/x86_64/ 2>/dev/null || true
          fi
          
          # Copy aarch64 packages
          if [ -d "artifacts/packages-aarch64" ]; then
            cp artifacts/packages-aarch64/* repo/vedge/main/aarch64/ 2>/dev/null || true
          fi
          
          # Create main index page
          cat > repo/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="fr">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Alpine Linux Packages Repository</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      line-height: 1.6;
                      margin: 0;
                      padding: 2rem;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                  }
                  .container {
                      max-width: 1200px;
                      margin: 0 auto;
                      background: rgba(255, 255, 255, 0.95);
                      padding: 2rem;
                      border-radius: 15px;
                      box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                      backdrop-filter: blur(10px);
                  }
                  .header {
                      text-align: center;
                      margin-bottom: 3rem;
                      padding-bottom: 2rem;
                      border-bottom: 3px solid #667eea;
                  }
                  .header h1 {
                      color: #2d3748;
                      font-size: 2.5rem;
                      margin-bottom: 0.5rem;
                      text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
                  }
                  .arch-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
                      gap: 2rem;
                      margin: 2rem 0;
                  }
                  .arch-card {
                      border: 2px solid #e2e8f0;
                      border-radius: 12px;
                      padding: 2rem;
                      background: linear-gradient(145deg, #f8f9fa, #e9ecef);
                      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
                      transition: transform 0.3s ease, box-shadow 0.3s ease;
                  }
                  .arch-card:hover {
                      transform: translateY(-5px);
                      box-shadow: 0 8px 25px rgba(0,0,0,0.2);
                  }
                  .arch-title {
                      color: #667eea;
                      font-size: 1.8rem;
                      margin-bottom: 1rem;
                      font-weight: bold;
                      display: flex;
                      align-items: center;
                      gap: 10px;
                  }
                  .package-count {
                      background: #667eea;
                      color: white;
                      padding: 0.3rem 0.8rem;
                      border-radius: 20px;
                      font-size: 0.9rem;
                      font-weight: normal;
                  }
                  .package-list {
                      list-style: none;
                      padding: 0;
                  }
                  .package-list li {
                      padding: 0.8rem;
                      margin: 0.5rem 0;
                      background: white;
                      border-radius: 8px;
                      border-left: 4px solid #667eea;
                      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                      display: flex;
                      justify-content: space-between;
                      align-items: center;
                      transition: all 0.3s ease;
                  }
                  .package-list li:hover {
                      transform: translateX(5px);
                      box-shadow: 0 4px 15px rgba(0,0,0,0.2);
                  }
                  .package-name {
                      font-weight: 600;
                      color: #2d3748;
                  }
                  .package-size {
                      font-size: 0.85rem;
                      color: #718096;
                      background: #edf2f7;
                      padding: 0.2rem 0.6rem;
                      border-radius: 12px;
                  }
                  a {
                      color: inherit;
                      text-decoration: none;
                  }
                  a:hover {
                      color: #667eea;
                  }
                  .usage-section {
                      background: linear-gradient(145deg, #e2e8f0, #cbd5e0);
                      padding: 2rem;
                      border-radius: 12px;
                      margin: 3rem 0;
                      border: 1px solid #a0aec0;
                  }
                  .usage-title {
                      color: #2d3748;
                      font-size: 1.5rem;
                      margin-bottom: 1rem;
                      display: flex;
                      align-items: center;
                      gap: 10px;
                  }
                  pre {
                      background: #2d3748;
                      color: #e2e8f0;
                      padding: 1.5rem;
                      border-radius: 8px;
                      overflow-x: auto;
                      border-left: 4px solid #667eea;
                      font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;
                  }
                  .footer {
                      text-align: center;
                      margin-top: 3rem;
                      padding-top: 2rem;
                      border-top: 2px solid #e2e8f0;
                      color: #718096;
                  }
                  .stats {
                      display: flex;
                      justify-content: center;
                      gap: 2rem;
                      margin: 1rem 0;
                  }
                  .stat-item {
                      background: linear-gradient(145deg, #667eea, #764ba2);
                      color: white;
                      padding: 1rem 1.5rem;
                      border-radius: 10px;
                      text-align: center;
                      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
                  }
                  .stat-number {
                      font-size: 2rem;
                      font-weight: bold;
                  }
                  .stat-label {
                      font-size: 0.9rem;
                      opacity: 0.9;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>ðï¸ Alpine Linux Packages</h1>
                      <p style="font-size: 1.2rem; color: #4a5568;">Repository personnalisÃ© pour Alpine edge</p>
                      <div class="stats">
          EOF
          
          # Count packages for each architecture
          x86_64_count=0
          aarch64_count=0
          
          if [ -d "repo/vedge/main/x86_64" ]; then
            x86_64_count=$(ls repo/vedge/main/x86_64/*.apk 2>/dev/null | wc -l || echo "0")
          fi
          
          if [ -d "repo/vedge/main/aarch64" ]; then
            aarch64_count=$(ls repo/vedge/main/aarch64/*.apk 2>/dev/null | wc -l || echo "0")
          fi
          
          total_count=$((x86_64_count + aarch64_count))
          
          cat >> repo/index.html << EOF
                          <div class="stat-item">
                              <div class="stat-number">$total_count</div>
                              <div class="stat-label">Packages Total</div>
                          </div>
                          <div class="stat-item">
                              <div class="stat-number">2</div>
                              <div class="stat-label">Architectures</div>
                          </div>
                          <div class="stat-item">
                              <div class="stat-number">edge</div>
                              <div class="stat-label">Alpine Version</div>
                          </div>
          EOF
          
          cat >> repo/index.html << 'EOF'
                      </div>
                  </div>
                  
                  <div class="arch-grid">
          EOF
          
          # Generate HTML for x86_64
          cat >> repo/index.html << EOF
                      <div class="arch-card">
                          <div class="arch-title">
                              ð¥ï¸ x86_64 <span class="package-count">$x86_64_count packages</span>
                          </div>
                          <ul class="package-list">
          EOF
          
          if [ -d "repo/vedge/main/x86_64" ] && [ "$x86_64_count" -gt "0" ]; then
            for apk in repo/vedge/main/x86_64/*.apk; do
              if [ -f "$apk" ]; then
                filename=$(basename "$apk")
                size=$(ls -lh "$apk" | awk '{print $5}')
                cat >> repo/index.html << EOF
                              <li>
                                  <a href="vedge/main/x86_64/$filename" class="package-name">$filename</a>
                                  <span class="package-size">$size</span>
                              </li>
          EOF
              fi
            done
          else
            echo '                              <li><span class="package-name">Aucun package disponible</span></li>' >> repo/index.html
          fi
          
          cat >> repo/index.html << 'EOF'
                          </ul>
                      </div>
          EOF
          
          # Generate HTML for aarch64
          cat >> repo/index.html << EOF
                      <div class="arch-card">
                          <div class="arch-title">
                              ð§ aarch64 <span class="package-count">$aarch64_count packages</span>
                          </div>
                          <ul class="package-list">
          EOF
          
          if [ -d "repo/vedge/main/aarch64" ] && [ "$aarch64_count" -gt "0" ]; then
            for apk in repo/vedge/main/aarch64/*.apk; do
              if [ -f "$apk" ]; then
                filename=$(basename "$apk")
                size=$(ls -lh "$apk" | awk '{print $5}')
                cat >> repo/index.html << EOF
                              <li>
                                  <a href="vedge/main/aarch64/$filename" class="package-name">$filename</a>
                                  <span class="package-size">$size</span>
                              </li>
          EOF
              fi
            done
          else
            echo '                              <li><span class="package-name">Aucun package disponible</span></li>' >> repo/index.html
          fi
          
          # Complete the HTML
          cat >> repo/index.html << 'EOF'
                          </ul>
                      </div>
                  </div>
                  
                  <div class="usage-section">
                      <div class="usage-title">ð³ Utilisation Docker</div>
                      <pre><code># Lancer le serveur de repository (multi-architecture)
          docker run -p 8080:80 $REPO_URL:latest
          
          # Ajouter Ã  Alpine Linux :
          echo "http://localhost:8080/vedge/main" >> /etc/apk/repositories
          apk update</code></pre>
                  </div>
                  
                  <div class="usage-section">
                      <div class="usage-title">ð¦ Installation directe</div>
                      <pre><code># Script d'installation automatique
          curl -fsSL https://raw.githubusercontent.com/$REPO_OWNER/$REPO_NAME/main/install-repo.sh | sh -s -- -v edge
          
          # Puis installer les packages
          apk add incus-feature incus-ui</code></pre>
                  </div>
                  
                  <div class="footer">
                      <p><strong>Container Image:</strong> <code>$REPO_URL:latest</code></p>
                      <p><small>GÃ©nÃ©rÃ© automatiquement par GitHub Actions â¢ 
                      <a href="https://github.com/$REPO_OWNER/$REPO_NAME" style="color: #667eea;">Code source</a></small></p>
                  </div>
              </div>
          </body>
          </html>
          EOF
      
      - name: Create multi-architecture Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM nginx:alpine
          
          # Copy repository files
          COPY repo/ /usr/share/nginx/html/
          
          # Set permissions
          RUN chmod -R 755 /usr/share/nginx/html
          
          # Configure nginx for APK repository
          RUN echo 'server {' > /etc/nginx/conf.d/apk-repo.conf && \
              echo '    listen 80;' >> /etc/nginx/conf.d/apk-repo.conf && \
              echo '    server_name localhost;' >> /etc/nginx/conf.d/apk-repo.conf && \
              echo '    root /usr/share/nginx/html;' >> /etc/nginx/conf.d/apk-repo.conf && \
              echo '    index index.html;' >> /etc/nginx/conf.d/apk-repo.conf && \
              echo '    ' >> /etc/nginx/conf.d/apk-repo.conf && \
              echo '    # Enable autoindex for directory listing' >> /etc/nginx/conf.d/apk-repo.conf && \
              echo '    location /vedge/main/ {' >> /etc/nginx/conf.d/apk-repo.conf && \
              echo '        autoindex on;' >> /etc/nginx/conf.d/apk-repo.conf && \
              echo '        autoindex_exact_size off;' >> /etc/nginx/conf.d/apk-repo.conf && \
              echo '        autoindex_localtime on;' >> /etc/nginx/conf.d/apk-repo.conf && \
              echo '    }' >> /etc/nginx/conf.d/apk-repo.conf && \
              echo '}' >> /etc/nginx/conf.d/apk-repo.conf
          
          # Remove default nginx config
          RUN rm /etc/nginx/conf.d/default.conf
          
          EXPOSE 80
          
          CMD ["nginx", "-g", "daemon off;"]
          EOF
      
      - name: Build and push multi-architecture image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.lowercase-repo.outputs.repo_lowercase }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ steps.lowercase-repo.outputs.repo_lowercase }}/${{ env.IMAGE_NAME }}:edge
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: repo/
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          REPO_URL: ${{ env.REGISTRY }}/${{ steps.lowercase-repo.outputs.repo_lowercase }}/${{ env.IMAGE_NAME }}
        run: |
          # Create or update release
          RELEASE_TAG="v$(date +%Y%m%d)-edge"
          RELEASE_NAME="Alpine Edge Packages $(date +%Y-%m-%d)"
          
          # Create archives for each architecture
          cd artifacts
          
          if [ -d "packages-x86_64" ] && [ "$(ls packages-x86_64/*.apk 2>/dev/null | wc -l)" -gt "0" ]; then
            cd packages-x86_64
            tar -czf "../../alpine-packages-edge-x86_64.tar.gz" *.apk
            cd ..
          fi
          
          if [ -d "packages-aarch64" ] && [ "$(ls packages-aarch64/*.apk 2>/dev/null | wc -l)" -gt "0" ]; then
            cd packages-aarch64
            tar -czf "../../alpine-packages-edge-aarch64.tar.gz" *.apk
            cd ..
          fi
          
          cd ..
          
          # Check if release exists and delete it
          if gh release view "$RELEASE_TAG" >/dev/null 2>&1; then
            gh release delete "$RELEASE_TAG" --yes
          fi
          
          # Create new release
          gh release create "$RELEASE_TAG" \
            --title "$RELEASE_NAME" \
            --notes "ðï¸ **Alpine Edge Packages Build**

          Packages construits automatiquement pour Alpine Linux edge avec support multi-architecture.

          ## ð³ **Container Multi-Architecture**
          \`\`\`bash
          docker run -p 8080:80 $REPO_URL:latest
          \`\`\`

          ## ð **GitHub Pages**
          Repository APK accessible sur: https://$REPO_OWNER.github.io/$REPO_NAME/

          ## ð¦ **Packages Disponibles**

          ### x86_64
          $([ -d "artifacts/packages-x86_64" ] && cd artifacts/packages-x86_64 && ls *.apk 2>/dev/null | sed 's/^/- /' || echo '- Aucun package')

          ### aarch64  
          $([ -d "artifacts/packages-aarch64" ] && cd artifacts/packages-aarch64 && ls *.apk 2>/dev/null | sed 's/^/- /' || echo '- Aucun package')

          ## ð **Installation Rapide**
          \`\`\`bash
          curl -fsSL https://raw.githubusercontent.com/$REPO_OWNER/$REPO_NAME/main/install-repo.sh | sh -s -- -v edge
          \`\`\`" \
            --prerelease
          
          # Upload archives
          [ -f "alpine-packages-edge-x86_64.tar.gz" ] && gh release upload "$RELEASE_TAG" "alpine-packages-edge-x86_64.tar.gz" --clobber
          [ -f "alpine-packages-edge-aarch64.tar.gz" ] && gh release upload "$RELEASE_TAG" "alpine-packages-edge-aarch64.tar.gz" --clobber
          
          # Upload individual APK files
          for arch_dir in artifacts/packages-*; do
            if [ -d "$arch_dir" ]; then
              for apk in "$arch_dir"/*.apk; do
                [ -f "$apk" ] && gh release upload "$RELEASE_TAG" "$apk" --clobber
              done
            fi
          done
      
      - name: Summary
        if: always()
        env:
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          REPO_URL: ${{ env.REGISTRY }}/${{ steps.lowercase-repo.outputs.repo_lowercase }}/${{ env.IMAGE_NAME }}
        run: |
          echo "## ðï¸ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Alpine Version:** edge" >> $GITHUB_STEP_SUMMARY
          echo "- **Multi-Architecture Container:** \`$REPO_URL:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Pages:** https://$REPO_OWNER.github.io/$REPO_NAME/" >> $GITHUB_STEP_SUMMARY
          
          total_packages=0
          for arch in x86_64 aarch64; do
            if [ -d "artifacts/packages-$arch" ]; then
              package_count=$(ls artifacts/packages-$arch/*.apk 2>/dev/null | wc -l || echo "0")
              total_packages=$((total_packages + package_count))
              echo "- **$arch Packages:** $package_count" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "- **Total Packages:** $total_packages" >> $GITHUB_STEP_SUMMARY
          
          if [ "$total_packages" -gt "0" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ð Package List:" >> $GITHUB_STEP_SUMMARY
            for arch_dir in artifacts/packages-*; do
              if [ -d "$arch_dir" ]; then
                arch=$(basename "$arch_dir" | sed 's/packages-//')
                echo "#### $arch:" >> $GITHUB_STEP_SUMMARY
                for pkg in "$arch_dir"/*.apk; do
                  if [ -f "$pkg" ]; then
                    echo "- \`$(basename "$pkg")\`" >> $GITHUB_STEP_SUMMARY
                  fi
                done
              fi
            done
          fi
